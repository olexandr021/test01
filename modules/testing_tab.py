# modules/testing_tab.py
import streamlit as st
# ----- –ó–ú–Ü–ù–ï–ù–û –¢–£–¢: –î–æ–¥–∞–Ω–æ timezone -----
from datetime import datetime, date, timedelta, timezone
# ----- –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù -----
from modules.backtesting import Backtester
import pandas as pd
from modules.logger import logger
import inspect
from modules.config_manager import ConfigManager
from decimal import Decimal # –î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
import math # –î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è float
import json # –î–ª—è st.json

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ BaseStrategy –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
try:
     from strategies.base_strategy import BaseStrategy
except ImportError:
     logger.error("BT Tab: –ù–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ BaseStrategy.")
     # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É, —è–∫—â–æ BaseStrategy –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
     class BaseStrategy:
         @staticmethod
         def get_default_params_with_types():
             return {} # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫, —è–∫—â–æ –∫–ª–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

def show_testing_tab(session_state, available_strategies: dict, backtester: Backtester, config_manager: ConfigManager):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤–∫–ª–∞–¥–∫—É –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π."""
    st.header("üî¨ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π (Backtesting)")

    if not available_strategies:
        st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π —É –ø–∞–ø—Ü—ñ 'strategies'.")
        return
    if not backtester:
        st.error("–ü–æ–º–∏–ª–∫–∞: Backtester –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API.")
        # –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–ø—Ä–æ–±–∏ –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        return
    if not config_manager:
        st.error("–ü–æ–º–∏–ª–∫–∞: ConfigManager –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        return

    # --- –í–∏–±—ñ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –±–µ–∫—Ç–µ—Å—Ç—É ---
    col1, col2 = st.columns(2)
    with col1:
        strategy_names = list(available_strategies.keys())
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º selectbox
        if not strategy_names:
             st.error("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π.")
             return # –ù–µ–º–∞—î —Å–µ–Ω—Å—É –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –±–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
        selected_test_strategy_name = st.selectbox("–°—Ç—Ä–∞—Ç–µ–≥—ñ—è", strategy_names, key="backtest_strategy_select")
        test_symbol = st.text_input("–°–∏–º–≤–æ–ª", "BTCUSDT", key="backtest_symbol").upper()
        # –Ü–Ω–¥–µ–∫—Å 5 ('1h') –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥—ñ–π—Å–Ω–∏–º, —è–∫—â–æ —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–µ–Ω–æ; –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
        intervals = ['1m', '3m', '5m', '15m', '30m', '1h', '2h', '4h', '6h', '8h', '12h', '1d', '3d', '1w']
        default_interval_index = 5 if len(intervals) > 5 else 0
        test_interval = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", intervals, index=default_interval_index, key="backtest_interval")

    with col2:
        initial_capital = st.number_input("–ö–∞–ø—ñ—Ç–∞–ª (USDT)", min_value=1.0, value=10000.0, step=100.0, key="backtest_capital")
        position_size_pct = st.number_input("–ü–æ–∑–∏—Ü—ñ—è (% –ö–∞–ø.)", min_value=0.1, max_value=100.0, value=10.0, step=0.1, format="%.1f", key="backtest_pos_size")
        commission_pct = st.number_input("–ö–æ–º—ñ—Å—ñ—è (%)", min_value=0.0, max_value=5.0, value=0.075, step=0.001, format="%.3f", key="backtest_commission", help="–í—ñ–¥—Å–æ—Ç–æ–∫ –∫–æ–º—ñ—Å—ñ—ó –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é (–≤—Ö—ñ–¥ –∞–±–æ –≤–∏—Ö—ñ–¥)")
        tp_pct = st.number_input("Take Profit (%)", min_value=0.0, value=1.0, step=0.01, format="%.2f", key="backtest_tp", help="0.0 - –≤–∏–º–∫–Ω–µ–Ω–æ")
        sl_pct = st.number_input("Stop Loss (%)", min_value=0.0, value=0.5, step=0.01, format="%.2f", key="backtest_sl", help="0.0 - –≤–∏–º–∫–Ω–µ–Ω–æ")

    # --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–±—Ä–∞–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó ---
    st.subheader(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è '{selected_test_strategy_name}' (–¥–ª—è —Ü—å–æ–≥–æ –±–µ–∫—Ç–µ—Å—Ç—É)")
    strategy_params_for_test = {}
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –æ–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è —ñ—Å–Ω—É—î –≤ —Å–ª–æ–≤–Ω–∏–∫—É
    if selected_test_strategy_name and selected_test_strategy_name in available_strategies:
        strategy_class = available_strategies[selected_test_strategy_name]
        saved_config = config_manager.get_strategy_config(selected_test_strategy_name)
        # --- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω—É –ª–æ–≥—ñ–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ç–∞ —Ç–∏–ø—ñ–≤ ---
        default_params_info = {}
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª–∞—Å —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —ñ—Å–Ω—É—î —ñ –º–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –º–µ—Ç–æ–¥
        if strategy_class and hasattr(strategy_class, 'get_default_params_with_types'):
             try:
                 default_params_info = strategy_class.get_default_params_with_types()
             except Exception as e:
                 logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è {selected_test_strategy_name}: {e}")
                 st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è {selected_test_strategy_name}.")

        if not default_params_info:
            st.caption("–ù–µ–º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É —Ü—ñ–π —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó.")
        else:
            num_columns = len(default_params_info) if len(default_params_info) <= 4 else 4
            cols_params = st.columns(num_columns)
            col_idx = 0
            for name, info in default_params_info.items():
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ info —î —Å–ª–æ–≤–Ω–∏–∫–æ–º
                if not isinstance(info, dict):
                    logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—É '{name}' –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó '{selected_test_strategy_name}'. –û—á—ñ–∫—É–≤–∞–≤—Å—è —Å–ª–æ–≤–Ω–∏–∫.")
                    continue # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä

                with cols_params[col_idx % num_columns]:
                    param_type = info.get('type', str)
                    default_value = info.get('default')
                    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–æ —î, —ñ–Ω–∞–∫—à–µ –±–µ—Ä–µ–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–µ
                    # –ü–æ—Ç—Ä—ñ–±–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ç–∏–ø—É!
                    saved_raw_value = saved_config.get(name)
                    current_value = default_value # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ

                    if saved_raw_value is not None:
                        try:
                           # –°–ø—Ä–æ–±–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
                           if param_type is bool:
                               current_value = bool(saved_raw_value)
                           elif param_type is int:
                               current_value = int(saved_raw_value)
                           elif param_type is float:
                               current_value = float(saved_raw_value)
                           elif param_type is Decimal:
                               current_value = Decimal(str(saved_raw_value))
                           elif param_type is str:
                               current_value = str(saved_raw_value)
                           else: # –Ø–∫—â–æ —Ç–∏–ø –Ω–µ–≤—ñ–¥–æ–º–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ —è–∫ —î
                              current_value = saved_raw_value
                        except (ValueError, TypeError) as conv_err:
                           logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è '{saved_raw_value}' –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{name}' –¥–æ —Ç–∏–ø—É {param_type}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º. –ü–æ–º–∏–ª–∫–∞: {conv_err}")
                           current_value = default_value # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
                    elif default_value is None:
                        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —ñ –Ω–µ–º–∞—î –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ, —Å—Ç–∞–≤–∏–º–æ —â–æ—Å—å –±–µ–∑–ø–µ—á–Ω–µ
                        if param_type is bool: current_value = False
                        elif param_type is int: current_value = 0
                        elif param_type is float: current_value = 0.0
                        elif param_type is Decimal: current_value = Decimal(0)
                        elif param_type is str: current_value = ""
                        logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{name}'. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–∞–∑–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ç–∏–ø—É {param_type}.")


                    input_key = f"backtest_param_{selected_test_strategy_name}_{name}"
                    label = f"{name}"
                    help_text = f"–¢–∏–ø: {param_type.__name__}. –ó–∞ –∑–∞–º–æ–≤—á.: {default_value}"
                    input_value = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ

                    # UI –µ–ª–µ–º–µ–Ω—Ç–∏ (—è–∫ —É settings_tab, –∞–ª–µ –∑ –ø–æ—Ç–æ—á–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –∑ –±–µ–∫—Ç–µ—Å—Ç-—Ñ–æ—Ä–º–∏)
                    try:
                        if param_type is bool:
                             input_value = st.checkbox(label, value=bool(current_value), key=input_key, help=help_text)
                        elif param_type is float:
                             is_perc = 'percent' in name.lower() or 'rate' in name.lower()
                             # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ try-except –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
                             try: current_float = float(current_value)
                             except (ValueError, TypeError): current_float = 0.0

                             if is_perc:
                                 disp_val = current_float * 100
                                 step = 0.01
                                 fmt = "%.2f"
                                 label_ui = f"{label} (%)"
                             else:
                                 disp_val = current_float
                                 # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –∫—Ä–æ–∫ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è? –ú–æ–∂–ª–∏–≤–æ –∑–∞–Ω–∞–¥—Ç–æ —Å–∫–ª–∞–¥–Ω–æ.
                                 step = 1e-6 # –ú–∞–ª–∏–π –∫—Ä–æ–∫ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö float
                                 fmt = "%.6f"
                                 label_ui = label
                             input_disp = st.number_input(label_ui, value=disp_val, step=step, format=fmt, key=input_key, help=help_text)
                             if is_perc:
                                 input_value = input_disp / 100.0
                             else:
                                 input_value = input_disp
                        elif param_type is int:
                             try: current_int = int(current_value)
                             except (ValueError, TypeError): current_int = 0
                             input_value = st.number_input(label, value=current_int, step=1, key=input_key, help=help_text)
                        elif param_type is str:
                             input_value = st.text_input(label, value=str(current_value), key=input_key, help=help_text)
                        elif param_type is Decimal:
                              try: current_dec_float = float(current_value)
                              except (ValueError, TypeError): current_dec_float = 0.0
                              input_disp_float = st.number_input(label, value=current_dec_float, step=1e-8, format="%.8f", key=input_key, help=help_text)
                              input_value = Decimal(str(input_disp_float)) # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ float –≤–≤–æ–¥—É
                        else:
                             st.text(f"{label}: {current_value} (–¢–∏–ø {param_type} –Ω–µ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è)")
                             input_value = current_value # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫–µ –Ω–µ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è
                    except Exception as ui_err:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ UI –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {name}: {ui_err}")
                        st.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è '{name}'")
                        input_value = default_value # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –¥–µ—Ñ–æ–ª—Ç—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ UI

                    # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
                    strategy_params_for_test[name] = input_value
                col_idx += 1

    # --- –í–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É ---
    st.markdown("**–ü–µ—Ä—ñ–æ–¥ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è**")
    col_date1, col_date2 = st.columns(2)

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ try-except –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø—Ä–æ–±–ª–µ–º –∑ datetime
    try:
        # –¢–µ–ø–µ—Ä timezone –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        default_end_date = datetime.now(timezone.utc).date()
        # timedelta —Ç–∞–∫–æ–∂ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ
        default_start_date = default_end_date - timedelta(days=90)
    except Exception as date_err:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –¥–∞—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: {date_err}")
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–µ–∑–ø–µ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        default_end_date = date.today()
        default_start_date = default_end_date - timedelta(days=90)

    with col_date1:
        start_date = st.date_input("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞", default_start_date, key="backtest_start_date", help="–í–∫–ª—é—á–Ω–æ")
    with col_date2:
        end_date = st.date_input("–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞", default_end_date, key="backtest_end_date", help="–í–∫–ª—é—á–Ω–æ")

    run_disabled = False
    if start_date > end_date:
         run_disabled = True
         st.error("–ü–æ–º–∏–ª–∫–∞: –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –º–∞—î –±—É—Ç–∏ —Ä–∞–Ω—ñ—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –∫—ñ–Ω—Ü–µ–≤—ñ–π –¥–∞—Ç—ñ.")
    elif start_date == end_date:
         # –ú–æ–∂–ª–∏–≤–æ, –ø–æ–ø–µ—Ä–µ–¥–∏—Ç–∏, —â–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞ 1 –¥–µ–Ω—å –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º?
         st.info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∑–∞ –æ–¥–∏–Ω –ø–æ–≤–Ω–∏–π –¥–µ–Ω—å.")


    # --- –ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç—É ---
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–µ–∫-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è", key="run_backtest_button", disabled=run_disabled):
        if selected_test_strategy_name and selected_test_strategy_name in available_strategies:
            strategy_class = available_strategies[selected_test_strategy_name]
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Backtester API (–≤–∂–µ —î –≤–∏—â–µ, –∞–ª–µ –¥—É–±–ª—é—î–º–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
            if not backtester or not backtester.binance_api:
                 st.error("–ü–æ–º–∏–ª–∫–∞: Backtester –∞–±–æ –π–æ–≥–æ Binance API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–ª—é—á—ñ MainNet –≤ .env —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å.")
                 return # –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—É—Ç

            with st.spinner(f"–ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç—É: {selected_test_strategy_name} –Ω–∞ {test_symbol}... –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö..."):
                try:
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏ –≤ —Ä—è–¥–∫–∏ UTC
                    # –î–æ–¥–∞—î–º–æ —á–∞—Å, —â–æ–± –æ—Ö–æ–ø–∏—Ç–∏ –≤–µ—Å—å –¥–µ–Ω—å
                    start_datetime_utc = datetime.combine(start_date, datetime.min.time(), tzinfo=timezone.utc)
                    # –î–ª—è –∫—ñ–Ω—Ü–µ–≤–æ—ó –¥–∞—Ç–∏ –±–µ—Ä–µ–º–æ –∫—ñ–Ω–µ—Ü—å –¥–Ω—è
                    end_datetime_utc = datetime.combine(end_date, datetime.max.time(), tzinfo=timezone.utc)

                    start_date_str = start_datetime_utc.strftime('%Y-%m-%d %H:%M:%S')
                    # –ö—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç—É —Ç—Ä–µ–±–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏, —â–æ–± Binance API –≤–∫–ª—é—á–∏–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å
                    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–æ–¥–∞—Ç–∏ –æ–¥–∏–Ω –¥–µ–Ω—å —ñ –≤–∑—è—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è, –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
                    # –ü—Ä–æ—Å—Ç—ñ—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –¥–∞—Ç–∏ —è–∫ —î, –∞ Backtester –Ω–µ—Ö–∞–π —Å–∞–º —ó—Ö –æ–±—Ä–æ–±–ª—è—î
                    # –ê–±–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ datetime –æ–±'—î–∫—Ç–∏
                    end_date_str = end_datetime_utc.strftime('%Y-%m-%d %H:%M:%S') # –ö—ñ–Ω–µ—Ü—å –¥–Ω—è –≤–∫–ª—é—á–Ω–æ

                    logger.info(f"–ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç—É: –°—Ç—Ä–∞—Ç–µ–≥—ñ—è='{selected_test_strategy_name}', –°–∏–º–≤–æ–ª='{test_symbol}', –Ü–Ω—Ç–µ—Ä–≤–∞–ª='{test_interval}', –ü–µ—Ä—ñ–æ–¥='{start_date_str}' - '{end_date_str}', –ö–∞–ø—ñ—Ç–∞–ª={initial_capital}, –ü–æ–∑={position_size_pct}%, –ö–æ–º={commission_pct}%, TP={tp_pct}%, SL={sl_pct}%")
                    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É: {strategy_params_for_test}")


                    # --- –í–ò–ö–õ–ò–ö –ó –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò –°–¢–†–ê–¢–ï–ì–Ü–á ---
                    results = backtester.run_backtest(
                        symbol=test_symbol,
                        interval=test_interval,
                        strategy_class=strategy_class,
                        strategy_params=strategy_params_for_test, # <--- –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
                        start_date_str=start_date_str, # –ü–µ—Ä–µ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ UTC
                        end_date_str=end_date_str,     # –ü–µ—Ä–µ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ UTC
                        initial_capital=float(initial_capital), # –Ø–≤–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
                        position_size_pct=(float(position_size_pct)/100.0), # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ % –≤ —á–∞—Å—Ç–∫—É
                        commission_pct=(float(commission_pct)/100.0),    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ % –≤ —á–∞—Å—Ç–∫—É
                        tp_pct=float(tp_pct) if float(tp_pct) > 0 else None, # None —è–∫—â–æ 0
                        sl_pct=float(sl_pct) if float(sl_pct) > 0 else None  # None —è–∫—â–æ 0
                    )

                    if results:
                        st.session_state['backtest_results'] = results
                        logger.info("–ë–µ–∫-—Ç–µ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                        st.success("–ë–µ–∫-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        # –ú–æ–∂–Ω–∞ –æ–¥—Ä–∞–∑—É —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                        # st.experimental_rerun() # –ú–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω UI
                    else:
                        st.session_state['backtest_results'] = None
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ backtester
                        error_msg = getattr(backtester, 'last_error_message', "–ë–µ–∫-—Ç–µ—Å—Ç –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏.")
                        st.error(error_msg)
                        logger.error(f"–ë–µ–∫-—Ç–µ—Å—Ç –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞ –±–µ–∫—Ç–µ—Å—Ç–µ—Ä–∞: {error_msg}")

                except ImportError as imp_err:
                     st.session_state['backtest_results'] = None
                     logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –ø—ñ–¥ —á–∞—Å –±–µ–∫—Ç–µ—Å—Ç—É: {imp_err}", exc_info=True)
                     st.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {imp_err}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó.")
                except FileNotFoundError as fnf_err:
                     st.session_state['backtest_results'] = None
                     logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç—É: {fnf_err}", exc_info=True)
                     st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {fnf_err}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –∞–±–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API.")
                except Exception as e:
                    st.session_state['backtest_results'] = None
                    logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –±–µ–∫—Ç–µ—Å—Ç—É: {e}", exc_info=True)
                    st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –±–µ–∫—Ç–µ—Å—Ç—É: {e}")
        else:
            st.warning("–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É.")

    st.divider()
    # --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ---
    if 'backtest_results' in session_state and session_state['backtest_results']:
        results = session_state['backtest_results']
        params = results.get('parameters', {})
        metrics = results.get('metrics', {})
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á—ñ–≤ –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º
        strategy_name_display = params.get('strategy', 'N/–î')
        symbol_display = params.get('symbol', 'N/–î')
        st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏: `{strategy_name_display}` ({symbol_display})")

        start_date_display = params.get('start_date', 'N/–î')
        end_date_display = params.get('end_date', 'N/–î')
        interval_display = params.get('interval', 'N/–î')
        initial_capital_display = results.get('initial_capital', 0)
        position_size_pct_display = params.get('position_size_pct', 0) * 100
        commission_pct_display = params.get('commission_pct', 0) * 100
        tp_pct_display = params.get('tp_pct', 0.0)
        sl_pct_display = params.get('sl_pct', 0.0)

        st.caption(
            f"–ü–µ—Ä—ñ–æ–¥: {start_date_display} - {end_date_display} | "
            f"–Ü–Ω—Ç–µ—Ä–≤–∞–ª: {interval_display} | "
            f"–ö–∞–ø—ñ—Ç–∞–ª: {initial_capital_display:.2f} | "
            f"–ü–æ–∑.: {position_size_pct_display:.1f}% | "
            f"–ö–æ–º.: {commission_pct_display:.3f}% | "
            f"TP/SL: {tp_pct_display:.1f}%/{sl_pct_display:.1f}%"
        )
        with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—å —É —Ç–µ—Å—Ç—ñ"):
             strategy_params_display = params.get('strategy_params', {})
             # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Decimal –≤ float –¥–ª—è JSON —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
             serializable_params = {k: float(v) if isinstance(v, Decimal) else v for k, v in strategy_params_display.items()}
             st.json(json.dumps(serializable_params, indent=2))

        st.markdown("---")

        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
        final_balance = results.get('final_balance', 0)
        total_profit = results.get('total_profit', 0)
        profit_percentage = results.get('profit_percentage', 0)
        total_trades = metrics.get('total_trades', 0)
        pf_metric = metrics.get('profit_factor') # –ù–µ —Å—Ç–∞–≤–∏–º–æ 0 –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —â–æ–± –≤—ñ–¥—Ä—ñ–∑–Ω–∏—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≤—ñ–¥ 0

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("–ö—ñ–Ω—Ü. –ë–∞–ª–∞–Ω—Å", f"{final_balance:.2f}")
        col2.metric("Total PnL", f"{total_profit:.2f}", f"{profit_percentage:.2f}%")
        col3.metric("–£–≥–æ–¥", total_trades)

        if pf_metric is None:
             col4.metric("Profit Factor", "N/A")
        elif pf_metric == float('inf'):
             col4.metric("Profit Factor", "‚àû")
        elif isinstance(pf_metric, (int, float)):
             col4.metric("Profit Factor", f"{pf_metric:.2f}")
        else:
             col4.metric("Profit Factor", f"{pf_metric}") # –Ø–∫—â–æ –Ω–µ —á–∏—Å–ª–æ

        win_rate = metrics.get('win_rate')
        sharpe_ratio = metrics.get('sharpe_ratio')
        max_drawdown_pct = metrics.get('max_drawdown_pct')
        avg_trade_pnl = metrics.get('average_profit_per_trade')

        col5, col6, col7, col8 = st.columns(4)

        col5.metric("Win Rate", f"{win_rate:.2f}%" if isinstance(win_rate, (int, float)) else "N/A")
        col6.metric("Sharpe", f"{sharpe_ratio:.2f}" if isinstance(sharpe_ratio, (int, float)) else "N/A")
        col7.metric("Max Drawdown", f"{max_drawdown_pct:.2f}%" if isinstance(max_drawdown_pct, (int, float)) else "N/A")
        col8.metric("Avg Trade PnL", f"{avg_trade_pnl:.4f}" if isinstance(avg_trade_pnl, (int, float)) else "N/A")

        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –ë–∞–ª–∞–Ω—Å—É")
        balance_history = results.get('balance_history')
        if isinstance(balance_history, pd.DataFrame) and not balance_history.empty:
            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —ñ–Ω–¥–µ–∫—Å - —Ü–µ datetime –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if not pd.api.types.is_datetime64_any_dtype(balance_history.index):
                 try:
                     balance_history.index = pd.to_datetime(balance_history.index)
                 except Exception as e:
                     logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å —ñ—Å—Ç–æ—Ä—ñ—ó –±–∞–ª–∞–Ω—Å—É –≤ datetime: {e}")
                     st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –±–∞–ª–∞–Ω—Å—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º—É –∑ –¥–∞—Ç–∞–º–∏.")
                     balance_history = None # –ù–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫

            if balance_history is not None:
                 st.line_chart(balance_history)
        elif isinstance(balance_history, list) and balance_history: # –Ø–∫—â–æ —Ü–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
             try:
                 df_balance = pd.DataFrame(balance_history)
                 if 'timestamp' in df_balance.columns and 'balance' in df_balance.columns:
                     df_balance['timestamp'] = pd.to_datetime(df_balance['timestamp'])
                     df_balance = df_balance.set_index('timestamp')
                     st.line_chart(df_balance[['balance']])
                 else:
                     st.warning("–Ü—Å—Ç–æ—Ä—ñ—è –±–∞–ª–∞–Ω—Å—É –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.")
             except Exception as e:
                 logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–ø–∏—Å–∫—É —ñ—Å—Ç–æ—Ä—ñ—ó –±–∞–ª–∞–Ω—Å—É: {e}")
                 st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –±–∞–ª–∞–Ω—Å—É.")
        else:
            st.warning("–î–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –±–∞–ª–∞–Ω—Å—É –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ.")


        with st.expander("–î–µ—Ç–∞–ª—ñ —Ç–∞ –°–ø–∏—Å–æ–∫ –£–≥–æ–¥"):
            st.subheader("–î–µ—Ç–∞–ª—å–Ω—ñ –ú–µ—Ç—Ä–∏–∫–∏")
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ json.dumps –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è infinity —Ç–∞ NaN
            # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
            def default_serializer(obj):
                if isinstance(obj, (Decimal)):
                    return float(obj)
                if obj == float('inf'):
                    return "Infinity"
                if obj == float('-inf'):
                    return "-Infinity"
                if isinstance(obj, float) and math.isnan(obj):
                    return "NaN"
                # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ —Ç–∏–ø–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
                try:
                     # –°–ø—Ä–æ–±–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
                     return json.JSONEncoder().encode(obj)
                except TypeError:
                    # –Ø–∫—â–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—è–¥–æ–∫
                    return str(obj)

            try:
                 st.json(json.dumps(metrics, indent=2, default=default_serializer))
            except Exception as json_err:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–µ—Ç—Ä–∏–∫ –≤ JSON: {json_err}")
                st.text(str(metrics)) # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —è–∫ —Ç–µ–∫—Å—Ç, —è–∫—â–æ JSON –Ω–µ –≤–¥–∞–ª–æ—Å—è

            st.subheader("–°–ø–∏—Å–æ–∫ –£–≥–æ–¥")
            trades = results.get('trades', []) # –û—á—ñ–∫—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
            if trades and isinstance(trades, list) and isinstance(trades[0], dict):
                 try:
                     df_trades = pd.DataFrame(trades)
                     # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –∑ –¥–∞—Ç–∞–º–∏/—á–∞—Å–æ–º
                     for col in ['entry_time', 'exit_time']:
                          if col in df_trades.columns:
                              df_trades[col] = pd.to_datetime(df_trades[col], errors='coerce')
                     # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ float
                     for col in ['entry_price', 'exit_price', 'pnl', 'pnl_pct']:
                          if col in df_trades.columns:
                              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–ª–æ–Ω–∫–∞ —á–∏—Å–ª–æ–≤–∞ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
                              if pd.api.types.is_numeric_dtype(df_trades[col]):
                                   df_trades[col] = df_trades[col].map('{:.4f}'.format) # –ü—Ä–∏–∫–ª–∞–¥ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                              else:
                                   # –Ø–∫—â–æ –Ω–µ —á–∏—Å–ª–æ–≤–∞, –ø—Ä–æ–±—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –ø–æ–º–∏–ª–∫–∏
                                   df_trades[col] = pd.to_numeric(df_trades[col], errors='coerce').map('{:.4f}'.format)


                     st.dataframe(df_trades, use_container_width=True)
                 except Exception as df_err:
                     logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è DataFrame –¥–ª—è —É–≥–æ–¥: {df_err}")
                     st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —É–≥–æ–¥ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ.")
                     st.text(str(trades)) # –ü–æ–∫–∞–∑—É—î–º–æ —è–∫ —Ç–µ–∫—Å—Ç
            elif trades: # –Ø–∫—â–æ trades –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, –∞–ª–µ –Ω–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
                 st.warning("–°–ø–∏—Å–æ–∫ —É–≥–æ–¥ –º–∞—î –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.")
                 st.text(str(trades))
            else:
                 st.info("–£–≥–æ–¥–∏ –ø—ñ–¥ —á–∞—Å —Ü—å–æ–≥–æ –±–µ–∫—Ç–µ—Å—Ç—É –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
    elif 'backtest_results' in session_state and session_state['backtest_results'] is None:
         # –Ø–∫—â–æ –±–µ–∫—Ç–µ—Å—Ç –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π, –∞–ª–µ –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–º–æ–∂–ª–∏–≤–æ, –ø–æ–º–∏–ª–∫–∞)
         # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤–∂–µ –º–∞–ª–æ –±—É—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–æ –≤–∏—â–µ
         st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–µ–∫—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
    # else:
         # –ë–µ–∫—Ç–µ—Å—Ç —â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–≤—Å—è
         # st.info("–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∫—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.")
