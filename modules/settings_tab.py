# modules/settings_tab.py
import streamlit as st
from modules.config_manager import ConfigManager
import inspect
from modules.logger import logger
from decimal import Decimal # –î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ —Ç–∏–ø–∞–º–∏
import math # –î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è float
from modules.bot_core import BotCore # –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É

# –î–æ–¥–∞—î–º–æ bot_core –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ–∂–∏–º
def show_settings_tab(session_state, config_manager: ConfigManager, available_strategies: dict, bot_core: BotCore | None):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤–∫–ª–∞–¥–∫—É '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'."""
    st.header("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

    st.warning("‚ö†Ô∏è **–£–≤–∞–≥–∞:** –ó–º—ñ–Ω–∞ –¥–µ—è–∫–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏, –°–∏–º–≤–æ–ª, –°—Ç—Ä–∞—Ç–µ–≥—ñ—è) –ø–æ—Ç—Ä–µ–±—É—î **–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —è–¥—Ä–∞ –±–æ—Ç–∞** –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è.")

    # --- –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ ---
    st.subheader("–ó–∞–≥–∞–ª—å–Ω—ñ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–æ—Ç–∞")
    bot_config = config_manager.get_bot_config()
    edited_bot_config = bot_config.copy() # –†–µ–¥–∞–≥—É—î–º–æ –∫–æ–ø—ñ—é

    # --- –í–∏–±—ñ—Ä –†–µ–∂–∏–º—É ---
    current_core_mode = 'TestNet' # Default
    if bot_core:
        current_core_mode = bot_core.active_mode
    else:
        current_core_mode = bot_config.get('active_mode','TestNet')
    st.caption(f"–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º —è–¥—Ä–∞: {current_core_mode}")
    modes = ['TestNet', '–†–µ–∞–ª—å–Ω–∏–π']
    default_mode_index = 0
    if current_core_mode in modes:
         default_mode_index = modes.index(current_core_mode)
    selected_mode = st.selectbox(
        "–†–µ–∂–∏–º –†–æ–±–æ—Ç–∏ –¥–ª—è –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ó–∞–ø—É—Å–∫—É",
        modes,
        index=default_mode_index,
        key="setting_active_mode"
    )
    edited_bot_config['active_mode'] = selected_mode

    # --- –í–∏–±—ñ—Ä –°–∏–º–≤–æ–ª—É ---
    current_symbol = 'BTCUSDT' # Default
    if bot_core:
         current_symbol = bot_core.symbol
    else:
         current_symbol = bot_config.get('trading_symbol','BTCUSDT')
    edited_bot_config['trading_symbol'] = st.text_input(
        "–¢–æ—Ä–≥–æ–≤–∏–π –°–∏–º–≤–æ–ª –¥–ª—è –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ó–∞–ø—É—Å–∫—É",
        value=current_symbol,
        key="setting_symbol").upper()

    # --- –í–∏–±—ñ—Ä –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó ---
    current_strategy = None # Default
    if bot_core:
         current_strategy = bot_core.selected_strategy_name
    else:
         current_strategy = bot_config.get('selected_strategy')
    strategy_names = [""] + list(available_strategies.keys()) # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç
    default_strategy_index = 0
    if current_strategy and current_strategy in strategy_names:
        default_strategy_index = strategy_names.index(current_strategy)
    selected_strategy = st.selectbox(
        "–°—Ç—Ä–∞—Ç–µ–≥—ñ—è –¥–ª—è –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ó–∞–ø—É—Å–∫—É",
        strategy_names,
        index=default_strategy_index,
        key="setting_strategy",
        format_func=lambda x: x if x else "–ù–µ –æ–±—Ä–∞–Ω–æ" # –ü–æ–∫–∞–∑—É—î–º–æ "–ù–µ –æ–±—Ä–∞–Ω–æ" –¥–ª—è ""
    )
    if selected_strategy:
         edited_bot_config['selected_strategy'] = selected_strategy
    else:
         edited_bot_config['selected_strategy'] = None


    # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¢–æ—Ä–≥—ñ–≤–ª—ñ ---
    st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¢–æ—Ä–≥—ñ–≤–ª—ñ**")
    edited_bot_config['position_size_percent'] = st.number_input("–†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó (% –∫–∞–ø—ñ—Ç–∞–ª—É)", value=float(bot_config.get('position_size_percent',10.0)), min_value=0.1, max_value=100.0, step=0.1, format="%.1f", key="setting_pos_size")
    edited_bot_config['take_profit_percent'] = st.number_input("–¢–µ–π–∫ –ü—Ä–æ—Ñ—ñ—Ç (%)", value=float(bot_config.get('take_profit_percent',1.0)), min_value=0.01, step=0.01, format="%.2f", key="setting_tp")
    edited_bot_config['stop_loss_percent'] = st.number_input("–°—Ç–æ–ø –õ–æ—Å (%)", value=float(bot_config.get('stop_loss_percent',0.5)), min_value=0.01, step=0.01, format="%.2f", key="setting_sl")
    edited_bot_config['commission_taker'] = st.number_input("–ö–æ–º—ñ—Å—ñ—è Taker (%)", value=float(bot_config.get('commission_taker',0.075)), min_value=0.0, max_value=1.0, step=0.001, format="%.3f", key="setting_comm_taker")

    # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram ---
    st.markdown("**–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Telegram**")
    edited_bot_config['telegram_enabled'] = st.checkbox("–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è Telegram", value=bot_config.get('telegram_enabled', False), key="settings_telegram_enabled")
    if edited_bot_config['telegram_enabled']:
        edited_bot_config['telegram_token'] = st.text_input("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞", value=bot_config.get('telegram_token',''), type="password", key="settings_telegram_token")
        edited_bot_config['telegram_chat_id'] = st.text_input("ID —á–∞—Ç—É Telegram", value=bot_config.get('telegram_chat_id',''), key="settings_telegram_chat_id")


    # --- –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ---
    st.divider()
    if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ó–∞–≥–∞–ª—å–Ω—ñ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", key="save_bot_settings"):
        try:
            if edited_bot_config != bot_config:
                 config_manager.set_bot_config(edited_bot_config)
                 st.success("–ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —è–¥—Ä–æ –±–æ—Ç–∞ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω —Ä–µ–∂–∏–º—É/—Å–∏–º–≤–æ–ª—É/—Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó.")
                 logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {edited_bot_config}")
                 # –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥ –≤ BotCore? –ê–±–æ –≤—ñ–Ω —Å–∞–º –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ?
                 # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É RELOAD_SETTINGS, —è–∫—â–æ —Ç—Ä–µ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ "–Ω–∞ –ª—å–æ—Ç—É"
                 if bot_core:
                      bot_core.command_queue.put({'type':'RELOAD_SETTINGS'})
            else:
                 st.info("–ó–º—ñ–Ω —É –∑–∞–≥–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ.")
        except Exception as e:
             st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è bot_config: {e}")

    st.divider()
    # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó ---
    st.subheader("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ü–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –°—Ç—Ä–∞—Ç–µ–≥—ñ–π")
    # –î–æ–¥–∞—î–º–æ –≤–∏–±—ñ—Ä —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    strategy_to_configure = st.selectbox(
        "–û–±—Ä–∞—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:",
        [""] + list(available_strategies.keys()), # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç
        key="settings_strategy_selector",
        format_func=lambda x: x if x else "--- –û–±–µ—Ä—ñ—Ç—å –°—Ç—Ä–∞—Ç–µ–≥—ñ—é ---"
    )

    if strategy_to_configure:
        strategy_class = available_strategies[strategy_to_configure]
        saved_strategy_config = config_manager.get_strategy_config(strategy_to_configure)
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        updated_params = {}
        st.markdown(f"**–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è `{strategy_to_configure}`:**")

        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ –∫–ª–∞—Å—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ —Ç–∏–ø—ñ–≤
            default_params_info = strategy_class.get_default_params_with_types()

            if not default_params_info:
                 st.caption("–¶—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –Ω–µ –º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª—è –≤–≤–æ–¥—É
                for name, info in default_params_info.items():
                    param_type = info.get('type', str)
                    current_value = saved_strategy_config.get(name, info.get('default'))
                    input_key = f"settings_param_{strategy_to_configure}_{name}"
                    label = f"{name}"
                    help_text = f"–ó–∞ –∑–∞–º–æ–≤—á.: {info.get('default','–ù/–î')}"
                    input_value = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É

                    # UI –µ–ª–µ–º–µ–Ω—Ç–∏ (—è–∫ —É model-21)
                    if param_type is bool:
                        input_value = st.checkbox(label, value=bool(current_value), key=input_key, help=help_text)
                    elif param_type is float:
                        is_perc = 'percent' in name.lower() or 'rate' in name.lower()
                        if is_perc:
                             disp_val = float(current_value) * 100
                             step = 0.01
                             fmt = "%.2f"
                             label_ui = f"{label} (%)"
                        else:
                             disp_val = float(current_value)
                             step = 1e-6
                             fmt = "%.6f"
                             label_ui = label
                        input_disp = st.number_input(label_ui, value=disp_val, step=step, format=fmt, key=input_key, help=help_text)
                        if is_perc:
                             input_value = input_disp / 100
                        else:
                             input_value = input_disp
                    elif param_type is int:
                        input_value = st.number_input(label, value=int(current_value), step=1, key=input_key, help=help_text)
                    elif param_type is str:
                        input_value = st.text_input(label, value=str(current_value), key=input_key, help=help_text)
                    elif param_type is Decimal:
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ float –¥–ª—è st.number_input, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ Decimal
                        input_disp_float = st.number_input(label, value=float(current_value), step=1e-8, format="%.8f", key=input_key, help=help_text)
                        input_value = Decimal(str(input_disp_float)) # –î–æ–¥–∞–Ω–æ Decimal
                    else:
                        st.text(f"{label}: {current_value} (–¢–∏–ø {param_type} –Ω–µ —Ä–µ–¥.)")
                        input_value = current_value # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è

                    # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
                    if input_value is not None:
                        updated_params[name] = input_value

                # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
                if st.button(f"üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–ª—è '{strategy_to_configure}'", key=f"save_{strategy_to_configure}"):
                    try:
                        # TODO: –ó—Ä–æ–±–∏—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Ç–∏–ø—ñ–≤ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º?
                        config_manager.set_strategy_config(strategy_to_configure, updated_params)
                        st.success(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è '{strategy_to_configure}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
                        logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ {strategy_to_configure}: {updated_params}")
                        # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ BotCore? –ú–æ–∂–ª–∏–≤–æ, —á–µ—Ä–µ–∑ RELOAD_SETTINGS
                        if bot_core:
                             bot_core.command_queue.put({'type':'RELOAD_SETTINGS'})
                    except Exception as e:
                         st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
                         logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è strat_config {strategy_to_configure}: {e}")

        except Exception as e:
             st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ {strategy_to_configure}: {e}")
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç—Ä–æ—Å–ø–µ–∫—Ü—ñ—ó {strategy_to_configure}: {e}", exc_info=True)

    else:
        st.info("–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –≤–∏—â–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ó—ó —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.")
