# modules/overview_tab.py

# BLOCK 1: Imports and Header
import streamlit as st
# --- –ó–ú–Ü–ù–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —à–ª—è—Ö –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É ---
from modules.bot_core.core import BotCore
# --- –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù–ò ---
from modules.binance_integration import BinanceAPI # –ú–æ–∂–µ –±—É—Ç–∏ None, —è–∫—â–æ API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
from modules.logger import logger # –ó–∞–ª–∏—à–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç, —Ö–æ—á –∑–∞—Ä–∞–∑ —ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
import pandas as pd
from decimal import Decimal # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—ó

# –ü—Ä–∏–π–º–∞—î–º–æ bot_core —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
def show_overview_tab(bot_core: BotCore | None):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤–∫–ª–∞–¥–∫—É '–û–≥–ª—è–¥' –∑ –æ—Å–Ω–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å—Ç–∞–Ω –±–æ—Ç–∞."""
    st.header("üìä –û–≥–ª—è–¥")

    if bot_core is None:
        st.error("–ü–æ–º–∏–ª–∫–∞: –Ø–¥—Ä–æ –±–æ—Ç–∞ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        return # –í–∏—Ö–æ–¥–∏–º–æ, —è–∫—â–æ —è–¥—Ä–∞ –Ω–µ–º–∞—î
# END BLOCK 1
# BLOCK 2: Main Display Logic
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑ BotCore
    bot_status = bot_core.get_status()
    # –í–∏—Ç—è–≥—É—î–º–æ –æ–∫—Ä–µ–º—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
    is_running = bot_status.get('is_running', False)
    active_mode = bot_status.get('active_mode', 'N/A')
    symbol = bot_status.get('symbol', 'N/A')
    strategy = bot_status.get('strategy', '–ù–µ –æ–±—Ä–∞–Ω–∞')
    ws_connected = bot_status.get('websocket_connected', False)
    position_active = bot_status.get('position_active', False)

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3 = st.columns(3)
    with col1:
        # –°—Ç–∞–Ω –∑–∞–ø—É—Å–∫—É
        if is_running:
            st.success("üü¢ –ë–æ—Ç **–ó–ê–ü–£–©–ï–ù–û**")
        else:
            st.error("üî¥ –ë–æ—Ç **–ó–£–ü–ò–ù–ï–ù–û**")
        # –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
        st.metric("–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏", active_mode)
    with col2:
        # –°–∏–º–≤–æ–ª
        st.metric("–¢–æ—Ä–≥–æ–≤–∏–π —Å–∏–º–≤–æ–ª", symbol)
        # –°—Ç—Ä–∞—Ç–µ–≥—ñ—è
        if strategy:
            st.metric("–û–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è", strategy)
        else:
            st.metric("–û–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è", "–ù–µ –æ–±—Ä–∞–Ω–∞")
    with col3:
        # –°—Ç–∞–Ω WebSocket
        if ws_connected:
            st.success("üü¢ WebSocket –ø—ñ–¥–∫–ª.")
        else:
            st.error("üî¥ WebSocket –≤—ñ–¥–∫–ª.")
        # –ù–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó
        position_status_str = "–¢–∞–∫" if position_active else "–ù—ñ"
        st.metric("–ê–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è?", position_status_str)

    st.divider()
    # --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ë–∞–ª–∞–Ω—Å—É ---
    st.subheader("üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç—É")

    # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∑ BotCore
    balances = bot_core.get_balance()
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –±–∞–ª–∞–Ω—Å–∏
    if balances:
        st.success(f"–ë–∞–ª–∞–Ω—Å–∏ ({active_mode}) –æ—Ç—Ä–∏–º–∞–Ω–æ.")
        balance_list = []
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –±–∞–ª–∞–Ω—Å—ñ–≤ —É —Å–ø–∏—Å–æ–∫ –¥–ª—è DataFrame
        for asset, data in balances.items():
            asset_data = {
                'asset': asset,
                'free': data.get('free', Decimal(0)), # –ë–µ–∑–ø–µ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø
                'locked': data.get('locked', Decimal(0)) # –ë–µ–∑–ø–µ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø
            }
            balance_list.append(asset_data)

        # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame
        df_balances = pd.DataFrame(balance_list)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è Decimal –≤ float —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ total
        df_balances['free'] = df_balances['free'].astype(float).round(8)
        df_balances['locked'] = df_balances['locked'].astype(float).round(8)
        df_balances['total'] = df_balances['free'] + df_balances['locked']
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω—É–ª—å–æ–≤—ñ –±–∞–ª–∞–Ω—Å–∏ —Ç–∞ —Å–æ—Ä—Ç—É—î–º–æ
        min_display_balance = 1e-9
        df_balances_nonzero = df_balances[df_balances['total'] > min_display_balance]
        df_balances_sorted = df_balances_nonzero.sort_values(by='total', ascending=False)

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –±–∞–ª–∞–Ω—Å—ñ–≤
        if not df_balances_sorted.empty:
            columns_to_display = ['asset', 'free', 'locked', 'total']
            df_display_balances = df_balances_sorted[columns_to_display].reset_index(drop=True)
            st.dataframe(
                df_display_balances,
                use_container_width=True,
                height=250 # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏—Å–æ—Ç—É —Ç–∞–±–ª–∏—Ü—ñ
            )
            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ç–∏—Ä—É–≤–∞–ª—å–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É –æ–∫—Ä–µ–º–æ
            quote_asset = getattr(bot_core, 'quote_asset', 'USDT') # –ë–µ–∑–ø–µ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∞—Ç—Ä–∏–±—É—Ç—É
            usdt_balance_row = df_balances_sorted[df_balances_sorted['asset'] == quote_asset]
            if not usdt_balance_row.empty:
                # –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ä—è–¥–∫–∞
                free_usdt = usdt_balance_row['free'].iloc[0]
                locked_usdt = usdt_balance_row['locked'].iloc[0]
                # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                free_usdt_str = f"{free_usdt:.2f}"
                locked_usdt_str = f"{locked_usdt:.2f}"
                # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –º–µ—Ç—Ä–∏–∫—É
                st.metric(f"–ë–∞–ª–∞–Ω—Å {quote_asset}", free_usdt_str, delta=f"–ó–∞–±–ª–æ–∫: {locked_usdt_str}")
            else:
                # –Ø–∫—â–æ –∫–æ—Ç–∏—Ä—É–≤–∞–ª—å–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É
                 st.metric(f"–ë–∞–ª–∞–Ω—Å {quote_asset}", "0.00")
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –Ω–µ–Ω—É–ª—å–æ–≤–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤
            st.info("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤—ñ–≤ –∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º.")

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ –±–∞–ª–∞–Ω—Å —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
    elif bot_core.is_running: # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É is_running, –æ—Ç—Ä–∏–º–∞–Ω—É —Ä–∞–Ω—ñ—à–µ
        st.warning("–ë–∞–ª–∞–Ω—Å–∏ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ...")
    else: # –Ø–∫—â–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
        st.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —è–¥—Ä–æ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤.")

    st.divider()
    # --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –î–µ—Ç–∞–ª–µ–π –ü–æ–∑–∏—Ü—ñ—ó ---
    st.subheader("‚ÑπÔ∏è –î–µ—Ç–∞–ª—ñ –ü–æ–∑–∏—Ü—ñ—ó")
    # --- –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ get_open_position ---
    position_details = bot_core.get_open_position()
    # --- –ö–Ü–ù–ï–¶–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–µ—Ç–∞–ª—ñ –ø–æ–∑–∏—Ü—ñ—ó
    if position_details:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–µ—Ç–æ–¥ BotCore –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó (—è–∫ –±—É–ª–æ —Ä–∞–Ω—ñ—à–µ)
        # –ê–ë–û –∫—Ä–∞—â–µ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é —Ç—É—Ç —á–∏ –≤ StateManager
        # –ü–æ–∫–∏ –∑–∞–ª–∏—à–∞—î–º–æ –≤–∏–∫–ª–∏–∫ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –º–µ—Ç–æ–¥—É, —Ö–æ—á–∞ —Ü–µ –Ω–µ —ñ–¥–µ–∞–ª—å–Ω–æ
        position_details_str_dict = None
        try:
             # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–µ—Ç–æ–¥ —ñ—Å–Ω—É—î –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º
             if hasattr(bot_core, '_decimal_dict_to_str'):
                  position_details_str_dict = bot_core._decimal_dict_to_str(position_details)
             else:
                  # –Ø–∫—â–æ –º–µ—Ç–æ–¥—É –Ω–µ–º–∞—î, —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π json.dumps
                  logger.warning("–ú–µ—Ç–æ–¥ _decimal_dict_to_str –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ BotCore, —Å–ø—Ä–æ–±–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.")
                  position_details_str_dict = position_details # –ü–µ—Ä–µ–¥–∞—î–º–æ —è–∫ —î
        except Exception as conv_err:
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü—ñ—ó: {conv_err}")
             position_details_str_dict = {"error": f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {conv_err}"}

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —è–∫ JSON
        if position_details_str_dict is not None:
             st.json(position_details_str_dict)
        else:
             # –Ø–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—å
             st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
             # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —è–∫ —Ç–µ–∫—Å—Ç
             st.text(str(position_details))
    else:
        # –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ–º–∞—î
        st.info("–í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î.")
# END BLOCK 2
