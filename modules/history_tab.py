# modules/history_tab.py
import streamlit as st
import pandas as pd
from modules.bot_core import BotCore
from modules.logger import logger
from decimal import Decimal
from datetime import datetime

def show_history_tab(bot_core: BotCore | None):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤–∫–ª–∞–¥–∫—É –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —É–≥–æ–¥ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó."""
    st.header("üíæ –Ü—Å—Ç–æ—Ä—ñ—è —Ç–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    if bot_core is None:
        st.error("–ü–æ–º–∏–ª–∫–∞: –Ø–¥—Ä–æ –±–æ—Ç–∞ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        return

    # --- –†–æ–∑–¥—ñ–ª –Ü—Å—Ç–æ—Ä—ñ—ó –£–≥–æ–¥ ---
    st.subheader("–Ü—Å—Ç–æ—Ä—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —É–≥–æ–¥")
    trade_history = bot_core.get_trade_history()

    if trade_history:
        try:
            df_history = pd.DataFrame(trade_history)
            # --- –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è ---
            if 'time' in df_history.columns:
                 df_history['time'] = pd.to_datetime(df_history['time']).dt.strftime('%Y-%m-%d %H:%M:%S')
            num_cols = ['price','last_fill_price','last_fill_qty','total_filled_qty','quantity','commission','pnl'] # –î–æ–¥–∞—î–º–æ quantity
            for col in num_cols:
                if col in df_history.columns:
                    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ None —ñ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–µ
                    def format_decimal(x):
                        if x is not None and isinstance(x, (Decimal, str, float, int)):
                             try:
                                 # –î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ NaN –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—î—é –≤ Decimal
                                 if isinstance(x, float) and pd.isna(x):
                                     return 'N/A'
                                 return f"{Decimal(str(x)):.8f}"
                             except Exception:
                                 return 'Error' # –ê–±–æ —ñ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–º–∏–ª–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                        return 'N/A'
                    df_history[col] = df_history[col].apply(format_decimal)

            col_map = {'time':'–ß–∞—Å','symbol':'–°–∏–º–≤–æ–ª','side':'–°—Ç–æ—Ä–æ–Ω–∞','type':'–¢–∏–ø','status':'–°—Ç–∞—Ç—É—Å','order_id':'ID(Bin)','client_order_id':'ID(Bot)','price':'–¶—ñ–Ω–∞(Avg)','total_filled_qty':'–ö-—Å—Ç—å','pnl':'PnL','commission':'–ö–æ–º.','commission_asset':'–ö–æ–º. –ê–∫—Ç–∏–≤','purpose':'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è'}
            cols_show = [k for k,v in col_map.items() if k in df_history.columns]
            df_display = df_history[cols_show].rename(columns=col_map)
            if '–ß–∞—Å' in df_display.columns:
                # –°–ø—Ä–æ–±—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ '–ß–∞—Å' –Ω–∞–∑–∞–¥ –≤ datetime –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
                try:
                    df_display['–ß–∞—Å_dt'] = pd.to_datetime(df_history['time']) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å
                    df_display = df_display.sort_values(by='–ß–∞—Å_dt', ascending=False).drop(columns=['–ß–∞—Å_dt'])
                except Exception as sort_e:
                     logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞ —á–∞—Å–æ–º: {sort_e}")
                     # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —è–∫ —Ä—è–¥–∫–∏ (–º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ)
                     df_display = df_display.sort_values(by='–ß–∞—Å', ascending=False)

            st.dataframe(df_display.reset_index(drop=True), use_container_width=True, height=400)
            # --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV ---
            @st.cache_data
            def convert_df(df):
                 return df.to_csv(index=False).encode('utf-8')

            csv_filename = f"history_{bot_core.symbol}_{datetime.now():%Y%m%d_%H%M}.csv"
            st.download_button(
                label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV",
                data=convert_df(df_display),
                file_name=csv_filename,
                mime="text/csv",
                key='download-csv'
            )
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ DataFrame —ñ—Å—Ç–æ—Ä—ñ—ó: {e}", exc_info=True)
    else:
        st.info("–Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥ –ø–æ—Ä–æ–∂–Ω—è.")

    st.divider()
    # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–µ—Å—ñ—ó ---
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó")
    session_stats = bot_core.get_session_stats() # –û—Ç—Ä–∏–º—É—î–º–æ float –∑–Ω–∞—á–µ–Ω–Ω—è
    if session_stats and session_stats.get('total_trades', 0) > 0: # –ü–æ–∫–∞–∑—É—î–º–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±—É–ª–∏ —É–≥–æ–¥–∏
        col1, col2, col3 = st.columns(3)
        col1.metric("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", session_stats.get('session_duration','N/A'))
        col2.metric("–£–≥–æ–¥", session_stats.get('total_trades',0))
        col3.metric("Win Rate", f"{session_stats.get('win_rate',0.0):.2f}%")

        col4, col5, col6 = st.columns(3)
        col4.metric("Total PnL", f"{session_stats.get('total_pnl',0.0):.4f} {bot_core.quote_asset}")
        col5.metric("Avg Win", f"{session_stats.get('avg_profit',0.0):.4f}")
        col6.metric("Avg Loss", f"{session_stats.get('avg_loss',0.0):.4f}")

        pf = session_stats.get('profit_factor', 0.0)
        if pf == float('inf'):
             pf_str = "‚àû"
        else:
             pf_str = f"{pf:.2f}"
        st.metric("Profit Factor", pf_str)
        # TODO: –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è BotCore)
    else:
        st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é –≤—ñ–¥—Å—É—Ç–Ω—è.")
