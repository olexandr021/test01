# modules/api_testing_tab.py
import streamlit as st
from modules.binance_integration import BinanceAPI, BinanceAPIError
from modules.logger import logger # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç logger
import time
import traceback
from decimal import Decimal # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Decimal
import math # –î–ª—è math.floor
from datetime import datetime, timezone # –î–ª—è —á–∞—Å—É —Å–µ—Ä–≤–µ—Ä–∞

def show_api_testing_tab(binance_api: BinanceAPI | None):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤–∫–ª–∞–¥–∫—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API Binance."""
    st.header("üì° –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API Binance")

    if binance_api is None:
        st.error("–ü–æ–º–∏–ª–∫–∞: Binance API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        return

    if binance_api.use_testnet:
        api_mode = 'TestNet'
    else:
        api_mode = 'MainNet'
    st.info(f"–†–µ–∂–∏–º API: **{api_mode}**")

    # –í–∏–±—ñ—Ä —Å–∏–º–≤–æ–ª—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_symbol = st.text_input("–°–∏–º–≤–æ–ª –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è", "BTCUSDT", key="api_test_symbol").upper()

    col1, col2, col3 = st.columns(3)

    with col1:
        st.subheader("–û—Ä–¥–µ—Ä–∏")
        if st.button("–¢–µ—Å—Ç: –†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ + –°–∫–∞—Å—É–≤–∞—Ç–∏ MARKET BUY", key="test_market_buy"):
            # --- –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ì–û –†–ï–ñ–ò–ú–£ ---
            confirm_real = True
            if not binance_api.use_testnet:
                st.error("üî¥ –£–í–ê–ì–ê! –†–ï–ê–õ–¨–ù–ò–ô –†–ï–ñ–ò–ú! üî¥")
                if 'confirm_real_market_buy' not in st.session_state:
                     st.session_state.confirm_real_market_buy = False
                if not st.session_state.confirm_real_market_buy:
                    st.session_state.confirm_real_market_buy = True
                    st.warning("**–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —â–µ —Ä–∞–∑ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –†–ï–ê–õ–¨–ù–û–ì–û –æ—Ä–¥–µ—Ä–∞!**")
                    st.rerun()
                else:
                    # confirm_real –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è True
                    st.session_state.confirm_real_market_buy = False # –°–∫–∏–¥–∞—î–º–æ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É

            if confirm_real:
                with st.spinner(f"–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è MARKET BUY –¥–ª—è {test_symbol}..."):
                    order_id = None
                    try:
                        # --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ ---
                        symbol_info = binance_api.get_symbol_info(test_symbol)
                        min_qty = Decimal("0.00001") # fallback
                        step_size = Decimal("0.00001") # fallback
                        min_notional = Decimal("10.0") # fallback
                        if symbol_info and 'filters' in symbol_info:
                            for f in symbol_info['filters']:
                                if f['filterType'] == 'LOT_SIZE':
                                     min_qty = Decimal(f['minQty'])
                                     step_size = Decimal(f['stepSize'])
                                if f['filterType'] == 'MIN_NOTIONAL':
                                     min_notional = Decimal(f['minNotional'])
                        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ min_notional
                        current_price = binance_api.get_current_price(test_symbol)
                        if current_price is None:
                             raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É")
                        test_quantity = (min_notional / current_price) * Decimal("1.1") # –¢—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ min_notional
                        # –ö–æ—Ä–∏–≥—É—î–º–æ –∫—Ä–æ–∫
                        if step_size > 0:
                             test_quantity = (test_quantity // step_size) * step_size
                        test_quantity = max(test_quantity, min_qty) # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ minQty
                        st.info(f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞ –∫-—Å—Ç—å: {test_quantity}")
                        # --- –†–æ–∑–º—ñ—â–µ–Ω–Ω—è ---
                        order = binance_api.place_order(symbol=test_symbol, side='BUY', type='MARKET', quantity=float(test_quantity))
                        if order and 'orderId' in order:
                            order_id = order['orderId']
                            st.success(f"–û—Ä–¥–µ—Ä MARKET BUY —Ä–æ–∑–º—ñ—â–µ–Ω–æ: ID={order_id}, Qty={test_quantity}")
                            time.sleep(1)
                            # --- –°–∫–∞—Å—É–≤–∞–Ω–Ω—è (–¥–ª—è MARKET –∑–∞–∑–≤–∏—á–∞–π –Ω–µ–º–æ–∂–ª–∏–≤–æ, –∞–ª–µ —Å–ø—Ä–æ–±—É—î–º–æ) ---
                            # –ö—Ä–∞—â–µ –±—É–ª–æ –± –æ–¥—Ä–∞–∑—É –ø—Ä–æ–¥–∞—Ç–∏, –∞–ª–µ –¥–ª—è —Ç–µ—Å—Ç—É API —Å–ø—Ä–æ–±—É—î–º–æ cancel
                            st.info(f"–°–ø—Ä–æ–±–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ {order_id}...")
                            cancel_res = binance_api.cancel_order(symbol=test_symbol, orderId=order_id)
                            if cancel_res:
                                st.info(f"–û—Ä–¥–µ—Ä {order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ (–∞–±–æ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ/–Ω–µ —ñ—Å–Ω—É—î). –í—ñ–¥–ø–æ–≤—ñ–¥—å: {cancel_res}")
                            else:
                                st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Ä–¥–µ—Ä {order_id}. –ô–º–æ–≤—ñ—Ä–Ω–æ, –≤—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–∏–π.")
                        else:
                             st.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è MARKET BUY: {order}")
                    except BinanceAPIError as api_e:
                         st.error(f"–ü–æ–º–∏–ª–∫–∞ API: Code={api_e.code}, Msg={api_e.msg}")
                    except Exception as e:
                         st.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                         logger.error("API Test Error:", exc_info=True)

    with col2:
        st.subheader("–ê–∫–∞—É–Ω—Ç")
        if st.button("–¢–µ—Å—Ç: –Ü–Ω—Ñ–æ –ê–∫–∞—É–Ω—Ç—É", key="test_account_info"):
            with st.spinner("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ –∞–∫–∞—É–Ω—Ç—É..."):
                try:
                    info = binance_api.get_account_info()
                    if info:
                         st.success("–Ü–Ω—Ñ–æ –∞–∫–∞—É–Ω—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–æ.")
                         st.json(info)
                    else:
                         st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ.")
                except BinanceAPIError as api_e:
                     st.error(f"–ü–æ–º–∏–ª–∫–∞ API: Code={api_e.code}, Msg={api_e.msg}")
                except Exception as e:
                     st.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")

        if st.button("–¢–µ—Å—Ç: –ß–∞—Å –°–µ—Ä–≤–µ—Ä–∞", key="test_server_time"):
            with st.spinner("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É..."):
                t = binance_api.get_server_time()
                if t:
                     dt = datetime.fromtimestamp(t/1000, tz=timezone.utc)
                     st.success(f"–ß–∞—Å —Å–µ—Ä–≤–µ—Ä–∞: {dt.strftime('%Y-%m-%d %H:%M:%S %Z')}")
                else:
                     st.error("–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —á–∞—Å.")

    with col3:
        st.subheader("–†–∏–Ω–∫–æ–≤—ñ –î–∞–Ω—ñ")
        if st.button(f"–¢–µ—Å—Ç: –¶—ñ–Ω–∞ {test_symbol}", key="test_get_price"):
            with st.spinner(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ {test_symbol}..."):
                price = binance_api.get_current_price(test_symbol)
                if price:
                     st.success(f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ {test_symbol}: {price}")
                else:
                     st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É {test_symbol}.")

        if st.button(f"–¢–µ—Å—Ç: Klines {test_symbol} (1h, 5)", key="test_get_klines"):
            with st.spinner(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è klines {test_symbol}..."):
                try:
                    klines = binance_api.get_historical_klines(symbol=test_symbol, interval='1h', limit=5)
                    if klines:
                         st.success(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(klines)} klines.")
                         st.json(klines)
                    else:
                         st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ klines.")
                except BinanceAPIError as api_e:
                     st.error(f"–ü–æ–º–∏–ª–∫–∞ API: Code={api_e.code}, Msg={api_e.msg}")
                except Exception as e:
                     st.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
