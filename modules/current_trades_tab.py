# modules/current_trades_tab.py

# BLOCK 1: Imports and Function Definition
import streamlit as st
# --- –ó–ú–Ü–ù–ê: –Ü–º–ø–æ—Ä—Ç—É—î–º–æ BotCore –∑ –Ω–æ–≤–æ–≥–æ –º—ñ—Å—Ü—è ---
from modules.bot_core.core import BotCore
# --- –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù–ò ---
from modules.binance_integration import BinanceAPI # –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏
from modules.logger import logger
import pandas as pd # –ú–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è –¥–ª—è DataFrame –ø—ñ–∑–Ω—ñ—à–µ
from decimal import Decimal
from datetime import datetime
import time # –î–ª—è time.sleep

def show_current_trades_tab(bot_core: BotCore | None, binance_api: BinanceAPI | None):
    """ –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤–∫–ª–∞–¥–∫—É –∑ –ø–æ—Ç–æ—á–Ω–æ—é –ø–æ–∑–∏—Ü—ñ—î—é —Ç–∞ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏. """
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏
    st.header("üìà –ü–æ–∑–∏—Ü—ñ—è —Ç–∞ –ê–∫—Ç–∏–≤–Ω—ñ –û—Ä–¥–µ—Ä–∏")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —è–¥—Ä–∞ –±–æ—Ç–∞
    if bot_core is None:
        st.error("–ü–æ–º–∏–ª–∫–∞: –Ø–¥—Ä–æ –±–æ—Ç–∞ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        # –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—â–æ —è–¥—Ä–∞ –Ω–µ–º–∞—î
        return
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API (–¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ PnL)
    if binance_api is None:
        st.warning("Binance API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –¥–ª—è PnL –Ω–µ–º–æ–∂–ª–∏–≤–µ.")
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –∞–ª–µ PnL –Ω–µ –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ
# END BLOCK 1
# BLOCK 2: Main Display Logic for Current Trades and Orders

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —è–¥—Ä–∞ –±–æ—Ç–∞
    bot_status = bot_core.get_status()
    # --- –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ get_open_position ---
    position = bot_core.get_open_position()
    # --- –ö–Ü–ù–ï–¶–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---
    active_orders_dict = bot_core.get_active_orders()

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–º–≤–æ–ª —Ç–∞ —Å—Ç–∞—Ç—É—Å –∑ bot_status
    symbol = bot_status.get('symbol', 'N/A')
    is_bot_running = bot_status.get('is_running', False)

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏–º–≤–æ–ª
    st.info(f"–ê–∫—Ç–∏–≤–Ω–∏–π —Å–∏–º–≤–æ–ª: **{symbol}**")
    # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è, —è–∫—â–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
    if not is_bot_running:
        st.warning("–Ø–¥—Ä–æ –±–æ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ. –î–∞–Ω—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏.")

    # --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ü–æ–∑–∏—Ü—ñ—ó ---
    st.subheader("–í—ñ–¥–∫—Ä–∏—Ç–∞ –ü–æ–∑–∏—Ü—ñ—è")
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ø–æ–∑–∏—Ü—ñ—è
    if position:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .get() –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
        entry_price_str = position.get('entry_price', '0')
        quantity_str = position.get('quantity', '0')
        entry_time_obj = position.get('entry_time') # –ú–æ–∂–µ –±—É—Ç–∏ datetime –∞–±–æ str/None
        status = position.get('status', 'N/A')
        oco_id = position.get('oco_list_id', 'N/A')

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Decimal
        entry_price = Decimal(str(entry_price_str))
        quantity = Decimal(str(quantity_str))

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        col1, col2, col3 = st.columns(3)
        with col1:
             st.metric("–°—Ç–∞—Ç—É—Å", status)
        with col2:
             # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ—é —Ç–æ—á–Ω—ñ—Å—Ç—é
             qty_prec = getattr(bot_core, 'qty_precision', 8)
             qty_formatted = f"{quantity:.{qty_prec}f}"
             st.metric("–ö—ñ–ª—å–∫—ñ—Å—Ç—å", qty_formatted)
        with col3:
             # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ü—ñ–Ω—É –∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ—é —Ç–æ—á–Ω—ñ—Å—Ç—é
             price_prec = getattr(bot_core, 'price_precision', 8)
             entry_price_formatted = f"{entry_price:.{price_prec}f}"
             st.metric("–¶—ñ–Ω–∞ –í—Ö–æ–¥—É", entry_price_formatted)

        # --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è PnL ---
        cp_str = "N/A"      # –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ (—Ä—è–¥–æ–∫)
        pnl_str = "N/A"     # PnL —Å—É–º–∞ (—Ä—è–¥–æ–∫)
        pnl_perc_str = "N/A" # PnL –≤—ñ–¥—Å–æ—Ç–æ–∫ (—Ä—è–¥–æ–∫)

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ PnL —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î API —Ç–∞ –≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        can_calculate_pnl = binance_api is not None and entry_price > 0 and quantity > 0
        if can_calculate_pnl:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
                cp_val = binance_api.get_current_price(symbol)
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü—ñ–Ω—É –æ—Ç—Ä–∏–º–∞–Ω–æ
                if cp_val is not None:
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Decimal
                    cp = Decimal(str(cp_val))
                    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    price_prec_pnl = getattr(bot_core, 'price_precision', 2) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 2 –∑–Ω–∞–∫–∏ –¥–ª—è PnL —Ü—ñ–Ω–∏
                    cp_str = f"{cp:.{price_prec_pnl}f}"

                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤—Ö–æ–¥—É —Ç–∞ –ø–æ—Ç–æ—á–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å
                    cost = entry_price * quantity
                    current_value = cp * quantity
                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ PnL
                    pnl = current_value - cost

                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ PnL —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
                    pnl_perc = Decimal(0)
                    # –£–Ω–∏–∫–∞—î–º–æ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å
                    if cost != 0:
                        pnl_perc = (pnl / cost) * Decimal(100)

                    # –§–æ—Ä–º–∞—Ç—É—î–º–æ PnL –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    quote_asset_pnl = getattr(bot_core, 'quote_asset', 'QUOTE')
                    pnl_str = f"{pnl:.2f} {quote_asset_pnl}" # 2 –∑–Ω–∞–∫–∏ –¥–ª—è —Å—É–º–∏ PnL
                    pnl_perc_str = f"{pnl_perc:.2f}%" # 2 –∑–Ω–∞–∫–∏ –¥–ª—è –≤—ñ–¥—Å–æ—Ç–∫–∞ PnL
                else:
                    # –Ø–∫—â–æ —Ü—ñ–Ω—É –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ (API –ø–æ–≤–µ—Ä–Ω—É–ª–æ None)
                    cp_str = "–ü–æ–º–∏–ª–∫–∞ —Ü—ñ–Ω–∏"
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –¥–ª—è {symbol} –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É PnL.")

            except Exception as e:
                # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É PnL: {e}")
                cp_str = "–ü–æ–º–∏–ª–∫–∞ PnL"
                pnl_str = "–ü–æ–º–∏–ª–∫–∞ PnL"
                pnl_perc_str = "–ü–æ–º–∏–ª–∫–∞ PnL"

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ PnL
        col_pnl1, col_pnl2, col_pnl3 = st.columns(3)
        with col_pnl1:
             st.metric("–ü–æ—Ç. –¶—ñ–Ω–∞", cp_str)
        with col_pnl2:
             st.metric("Unrealized P/L", pnl_str)
        with col_pnl3:
             st.metric("Unrealized P/L(%)", pnl_perc_str)

        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É –≤—Ö–æ–¥—É —Ç–∞ OCO ID
        entry_time_str = str(entry_time_obj) # –î–µ—Ñ–æ–ª—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        if isinstance(entry_time_obj, datetime):
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ datetime –æ–±'—î–∫—Ç
            try:
                 entry_time_str = entry_time_obj.strftime('%Y-%m-%d %H:%M UTC')
            except Exception as format_e:
                 logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —á–∞—Å –≤—Ö–æ–¥—É: {format_e}")
                 entry_time_str = str(entry_time_obj) # –ó–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
        st.caption(f"–ß–∞—Å –≤—Ö–æ–¥—É: {entry_time_str} | OCO List ID: {oco_id}")

        # --- –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó ---
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        close_button_label = f"üö® –ó–∞–∫—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é {symbol} @ Market"
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        close_button_disabled = not is_bot_running # –í–∏–º–∫–Ω–µ–Ω–∞, —è–∫—â–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É
        close_pressed = st.button(
            close_button_label,
            key="manual_close",
            disabled=close_button_disabled
        )
        # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
        if close_pressed:
            # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø—ñ–Ω–Ω–µ—Ä
            with st.spinner("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è..."):
                # –§–æ—Ä–º—É—î–º–æ –∫–æ–º–∞–Ω–¥—É
                close_command = {'type':'CLOSE_POSITION', 'payload':{'symbol': symbol}}
                try:
                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –≤ —á–µ—Ä–≥—É —è–¥—Ä–∞
                    bot_core.command_queue.put(close_command)
                    # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
                    time.sleep(1.0) # –ó–±—ñ–ª—å—à–µ–Ω–æ –ø–∞—É–∑—É
                    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                    st.success(f"–ö–æ–º–∞–Ω–¥—É CLOSE {symbol} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
                    # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ UI, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω
                    st.rerun()
                except Exception as e:
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
                    st.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è: {e}")
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ CLOSE: {e}", exc_info=True)

    else:
        # –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ–º–∞—î
        st.info("–í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î.")

    st.divider()
    # --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ê–∫—Ç–∏–≤–Ω–∏—Ö –û—Ä–¥–µ—Ä—ñ–≤ ---
    st.subheader("–ê–∫—Ç–∏–≤–Ω—ñ –û—Ä–¥–µ—Ä–∏")
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏
    if active_orders_dict:
        active_orders_list = []
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –æ—Ä–¥–µ—Ä—ñ–≤ —É —Å–ø–∏—Å–æ–∫ –¥–ª—è DataFrame
        for order_key, order_details in active_orders_dict.items():
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
            details_copy = order_details.copy()
            # –î–æ–¥–∞—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π ID (–º–æ–∂–µ –±—É—Ç–∏ clientOrderId –∞–±–æ orderId)
            details_copy['internal_id'] = order_key
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Decimal –≤ float –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—ñ
            for k, v in details_copy.items():
                if isinstance(v, Decimal):
                    details_copy[k] = float(v)
                # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é datetime –≤ —Ä—è–¥–æ–∫, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                # elif isinstance(v, datetime):
                #     details_copy[k] = v.strftime('%Y-%m-%d %H:%M:%S')

            active_orders_list.append(details_copy)

        # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame
        df_orders = pd.DataFrame(active_orders_list)

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–∂–∞–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ç–∞ —ñ–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        # (–≤—Ä–∞—Ö–æ–≤—É—î–º–æ –º–æ–∂–ª–∏–≤—ñ —ñ–º–µ–Ω–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª)
        cols_show_ordered = [
            'internal_id', 'client_order_id', 'order_id_binance',
            'symbol', 'side', 'type', 'purpose',
            'quantity_req', 'price', 'stop_price', 'status',
            'list_client_order_id', 'order_list_id_binance'
        ]
        # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –∫–æ–ª–æ–Ω–∫–∏, —è–∫—ñ —Ä–µ–∞–ª—å–Ω–æ —î –≤ DataFrame
        cols_to_display = [col for col in cols_show_ordered if col in df_orders.columns]

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ DataFrame
        if cols_to_display:
            df_display = df_orders[cols_to_display]
            # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
            # df_display = df_display.rename(columns={'quantity_req':'–ö-—Å—Ç—å', ...})
            st.dataframe(
                df_display,
                use_container_width=True,
                hide_index=True, # –•–æ–≤–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å DataFrame
                height=200 # –û–±–º–µ–∂—É—î–º–æ –≤–∏—Å–æ—Ç—É
            )
        else:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ (–º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ), –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å–µ
            logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤.")
            st.dataframe(
                df_orders,
                use_container_width=True,
                hide_index=True,
                height=200
            )
        # TODO: –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ —Ç—É—Ç
    else:
        # –Ø–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ –Ω–µ–º–∞—î
        st.info("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤.")
# END BLOCK 2
