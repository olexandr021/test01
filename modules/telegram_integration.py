# modules/telegram_integration.py
import telebot # pyTelegramBotAPI
from telebot.util import smart_split
from modules.logger import logger
from modules.config_manager import ConfigManager
import threading
import time
import queue
from decimal import Decimal
from datetime import datetime, timezone
import requests
import logging
import pandas as pd

class TelegramBotHandler:
    """
    –ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Telegram –±–æ—Ç–æ–º.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —á–µ—Ä–≥–∏ –¥–ª—è –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –∑ BotCore.
    """
    def __init__(self, command_queue: queue.Queue, event_queue: queue.Queue):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ Telegram.
        Args:
            command_queue (queue.Queue): –ß–µ—Ä–≥–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –¥–æ BotCore.
            event_queue (queue.Queue): –ß–µ—Ä–≥–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π/—Å–ø–æ–≤—ñ—â–µ–Ω—å –≤—ñ–¥ BotCore.
        """
        self.command_queue = command_queue
        self.event_queue = event_queue
        self.config_manager = ConfigManager()
        bot_config = {}
        try:
            bot_config = self.config_manager.get_bot_config()
        except Exception as e:
            logger.error(f"TG: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: {e}")

        self.is_enabled = bot_config.get('telegram_enabled', False)
        self.bot_token = bot_config.get('telegram_token')
        chat_id_str = bot_config.get('telegram_chat_id')
        self.authorized_chat_id = None
        if chat_id_str:
            try:
                self.authorized_chat_id = int(chat_id_str)
            except (ValueError, TypeError):
                logger.error(f"TG: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π Chat ID: '{chat_id_str}'.")

        self.bot: telebot.TeleBot | None = None
        self.polling_thread: threading.Thread | None = None
        self.event_listener_thread: threading.Thread | None = None
        self._stop_event = threading.Event()

        # –ê—Ç—Ä–∏–±—É—Ç–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        self.quote_asset = 'USDT'
        self.base_asset = 'BASE'
        self.price_precision = 4
        self.qty_precision = 8
        try:
            symbol = bot_config.get('trading_symbol', 'BTCUSDT')
            if 'USDT' in symbol:
                self.quote_asset = 'USDT'
                self.base_asset = symbol.replace('USDT','')
            elif 'BUSD' in symbol:
                self.quote_asset = 'BUSD'
                self.base_asset = symbol.replace('BUSD','')
            elif 'BTC' in symbol:
                self.quote_asset = 'BTC'
                self.base_asset = symbol.replace('BTC','')
            elif 'ETH' in symbol:
                self.quote_asset = 'ETH'
                self.base_asset = symbol.replace('ETH','')
            # TODO: –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ç–æ—á–Ω—ñ—Å—Ç—å –∑ BotCore
        except Exception:
            # –ó–∞–ª–∏—à–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
            pass

        if not self.is_enabled:
            logger.info("TG: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –≤–∏–º–∫–Ω–µ–Ω–æ.")
            return
        if not self.bot_token or not self.authorized_chat_id:
            logger.warning("TG: –¢–æ–∫–µ–Ω –∞–±–æ Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
            return

        logger.info(f"TG: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞. Chat ID: {self.authorized_chat_id}")
        try:
            self.bot = telebot.TeleBot(self.bot_token, threaded=False, parse_mode='HTML')
            bot_info = self.bot.get_me()
            logger.info(f"TG: –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–æ—Ç–∞ @{bot_info.username}")
            self._setup_handlers()
            self.start_listening()
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"TG: –ü–æ–º–∏–ª–∫–∞ API Telegram (—Ç–æ–∫–µ–Ω?): {e}")
            self.bot = None
        except Exception as e:
            logger.error(f"TG: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TeleBot: {e}.")
            self.bot = None

    def _is_authorized(self, message) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —á–∞—Ç—É."""
        if message.text and message.text.startswith(('/start', '/help')):
            return True
        if message.chat.id == self.authorized_chat_id:
            return True
        else:
            logger.warning(f"TG: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø: chat_id={message.chat.id} (@{message.from_user.username})")
            self._safe_reply(message, "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ.")
            return False

    def _safe_reply(self, message, text):
        """–ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
        if not self.bot:
            return
        try:
            self.bot.reply_to(message, text, parse_mode='HTML', disable_web_page_preview=True)
        except Exception as e:
            logger.error(f"TG –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")

    def _put_command(self, command: dict, message):
        """–ö–ª–∞–¥–µ –∫–æ–º–∞–Ω–¥—É –≤ —á–µ—Ä–≥—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
        reply_text = "‚è≥ –ö–æ–º–∞–Ω–¥—É –ø—Ä–∏–π–Ω—è—Ç–æ..." if command.get('type') not in ['START_CMD', 'HELP_CMD'] else None
        try:
            self.command_queue.put_nowait(command)
            logger.info(f"TG: –ö–æ–º–∞–Ω–¥—É {command.get('type')} –¥–æ–¥–∞–Ω–æ.")
            if reply_text:
                self._safe_reply(message, reply_text)
        except queue.Full:
            logger.error("TG: –ß–µ—Ä–≥–∞ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞!")
            self._safe_reply(message, "‚ùå –ü–æ–º–∏–ª–∫–∞: –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.")
        except Exception as e:
            logger.error(f"TG: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ '{command.get('type')}': {e}", exc_info=True)
            self._safe_reply(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    def _setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram."""
        if not self.bot:
            return

        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message):
            is_auth = message.chat.id == self.authorized_chat_id
            logger.info(f"TG /start –≤—ñ–¥ chat_id: {message.chat.id} (Auth: {is_auth})")
            help_text = ( "<b>üíé –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç Gemini</b>\n\n"
                          "<u>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ (–≤–ª–∞—Å–Ω–∏–∫—É):</u>\n"
                          "üìä /status - –°—Ç–∞–Ω\n"
                          "üí∞ /balance - –ë–∞–ª–∞–Ω—Å\n"
                          "üìà /position - –ü–æ–∑–∏—Ü—ñ—è\n"
                          "üíæ /history [N] - –û—Å—Ç. N —É–≥–æ–¥ (def:5)\n"
                          "üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—ñ—ó\n"
                          "‚ùå /close - –ó–∞–∫—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é\n"
                          "‚öôÔ∏è /reload_settings - –ü–µ—Ä–µ–∑–∞–≤. –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
                          "‚ñ∂Ô∏è /start_bot - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —è–¥—Ä–æ\n"
                          "‚èπÔ∏è /stop_bot - –ó—É–ø–∏–Ω–∏—Ç–∏ —è–¥—Ä–æ\n"
                          "/help - –î–æ–ø–æ–º–æ–≥–∞" )
            self._safe_reply(message, help_text)

        @self.bot.message_handler(commands=['status'])
        def get_status(message):
            if not self._is_authorized(message):
                 return
            logger.info(f"TG /status")
            self._put_command({'type': 'GET_STATUS'}, message)

        @self.bot.message_handler(commands=['balance'])
        def get_balance(message):
             if not self._is_authorized(message):
                 return
             logger.info(f"TG /balance")
             self._put_command({'type': 'GET_BALANCE'}, message)

        @self.bot.message_handler(commands=['position'])
        def get_position(message):
            if not self._is_authorized(message):
                 return
            logger.info(f"TG /position")
            self._put_command({'type': 'GET_POSITION'}, message)

        @self.bot.message_handler(commands=['history'])
        def get_history(message):
            if not self._is_authorized(message):
                 return
            logger.info(f"TG /history")
            num_trades = 5
            try:
                args = message.text.split()
                if len(args) > 1:
                    num = int(args[1])
                    num_trades = max(1, min(num, 50))
            except (ValueError, IndexError):
                logger.debug(f"TG /history: –ù–µ–∫–æ—Ä. –∞—Ä–≥—É–º–µ–Ω—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ {num_trades}")
                pass
            self._put_command({'type': 'GET_HISTORY', 'payload': {'count': num_trades}}, message)

        @self.bot.message_handler(commands=['stats'])
        def get_stats(message):
            if not self._is_authorized(message):
                 return
            logger.info(f"TG /stats")
            self._put_command({'type': 'GET_STATS'}, message)

        @self.bot.message_handler(commands=['close'])
        def close_position_cmd(message):
            if not self._is_authorized(message):
                 return
            logger.info(f"TG /close")
            self._put_command({'type': 'CLOSE_POSITION', 'payload': {}}, message)

        @self.bot.message_handler(commands=['stop_bot'])
        def stop_bot_cmd(message):
              if not self._is_authorized(message):
                  return
              logger.info(f"TG /stop_bot")
              self._put_command({'type': 'STOP'}, message)

        @self.bot.message_handler(commands=['start_bot'])
        def start_bot_cmd(message):
            if not self._is_authorized(message):
                 return
            logger.info(f"TG /start_bot")
            self._put_command({'type': 'START'}, message)

        @self.bot.message_handler(commands=['reload_settings'])
        def reload_settings_cmd(message):
            if not self._is_authorized(message):
                 return
            logger.info(f"TG /reload_settings")
            self._put_command({'type': 'RELOAD_SETTINGS'}, message)

        @self.bot.message_handler(func=lambda message: True)
        def handle_unknown(message):
               if not self._is_authorized(message):
                   return
               logger.debug(f"TG –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {message.text}")
               self._safe_reply(message, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. /help")


    def send_message(self, text: str, **kwargs):
        """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
        if not self.bot or not self.authorized_chat_id:
            if self.is_enabled:
                logger.warning(f"TG –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {text[:100]}...")
            return
        try:
            for chunk in smart_split(text, chars_per_string=4096):
                self.bot.send_message(self.authorized_chat_id, chunk, parse_mode='HTML', disable_web_page_preview=True, **kwargs)
            logger.debug(f"TG -> {text[:100]}...")
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"TG API –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ({self.authorized_chat_id}): {e}")
        except Exception as e:
            logger.error(f"TG –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ({self.authorized_chat_id}): {e}")

    def start_listening(self):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–æ—Ç–æ–∫–∏ –¥–ª—è polling —Ç–∞ event listener."""
        if not self.bot:
            logger.warning("TG: –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
            return
        # –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ
        self.stop()
        self._stop_event.clear()
        # –ó–∞–ø—É—Å–∫ Polling
        self.polling_thread = threading.Thread(target=self._polling_loop, daemon=True, name="TelegramPolling")
        self.polling_thread.start()
        logger.info("TG Polling –∑–∞–ø—É—â–µ–Ω–æ.")
        # –ó–∞–ø—É—Å–∫ Event Listener
        self.event_listener_thread = threading.Thread(target=self._event_listener_loop, daemon=True, name="TelegramEventListener")
        self.event_listener_thread.start()
        logger.info("TG Event listener –∑–∞–ø—É—â–µ–Ω–æ.")

    def _polling_loop(self):
        """–¶–∏–∫–ª polling –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫."""
        logger.info("TG Polling loop starting...")
        retries = 0
        max_retries = 10
        # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º
        self.reconnect_delay = 5 # –î–æ–¥–∞–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
        while not self._stop_event.is_set():
            if not self.bot:
                logger.error("TG –ë–æ—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∑—É–ø–∏–Ω–∫–∞ polling.")
                break
            try:
                logger.debug("TG Polling...")
                # –í–∏–∫–ª–∏–∫ polling –≤ –æ–∫—Ä–µ–º–æ–º—É –±–ª–æ—Ü—ñ
                self.bot.polling(none_stop=False, interval=1, timeout=20)
                # –Ø–∫—â–æ polling –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –±–µ–∑ –≤–∏–Ω—è—Ç–∫—É, –∞–ª–µ –∑—É–ø–∏–Ω–∫–∞ –Ω–µ –±—É–ª–∞ —Å–∏–≥–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
                if not self._stop_event.is_set():
                    logger.warning("TG Polling –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ. –ü–∞—É–∑–∞...")
                    time.sleep(self.reconnect_delay)
                    self.reconnect_delay = min(self.reconnect_delay * 1.5, 60) # –ó–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
                    retries = 0 # –°–∫–∏–¥–∞—î–º–æ —Å–ø—Ä–æ–±–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ polling (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—ñ–Ω –ø–µ—Ä–µ—Ä–≤–∞–≤—Å—è)

            except telebot.apihelper.ApiException as e:
                logger.error(f"TG API polling –ø–æ–º–∏–ª–∫–∞: {e}")
                if "Unauthorized" in str(e):
                    logger.critical("TG –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π! –ó—É–ø–∏–Ω–∫–∞.")
                    self.bot = None
                    break
                retries += 1
                wait = min(60, 2 ** retries)
                logger.info(f"TG –ü–∞—É–∑–∞ {wait}s (—Å–ø—Ä–æ–±–∞ {retries}/{max_retries})...")
                if retries >= max_retries:
                    logger.critical("TG –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç —Å–ø—Ä–æ–± polling.")
                    break
                self._stop_event.wait(wait)

            except requests.exceptions.RequestException as e:
                logger.error(f"TG –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è polling: {e}")
                retries += 1
                wait = min(60, 2 ** retries)
                logger.info(f"TG –ü–∞—É–∑–∞ {wait}s (—Å–ø—Ä–æ–±–∞ {retries}/{max_retries})...")
                if retries >= max_retries:
                    logger.critical("TG –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç —Å–ø—Ä–æ–± polling.")
                    break
                self._stop_event.wait(wait)

            except Exception as e:
                logger.error(f"TG –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ polling: {e}", exc_info=True)
                retries += 1
                wait = min(60, 2 ** retries)
                logger.info(f"TG –ü–∞—É–∑–∞ {wait}s (—Å–ø—Ä–æ–±–∞ {retries}/{max_retries})...")
                if retries >= max_retries:
                    logger.critical("TG –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç —Å–ø—Ä–æ–± polling.")
                    break
                self._stop_event.wait(wait)
        logger.info("TG Polling loop –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


    def _event_listener_loop(self):
        """–¶–∏–∫–ª, —â–æ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É—î —á–µ—Ä–≥—É –ø–æ–¥—ñ–π –≤—ñ–¥ BotCore."""
        logger.info("TG Event listener loop starting...")
        while not self._stop_event.is_set():
            try:
                 event = self.event_queue.get(timeout=1)
                 if event:
                      event_type = event.get('type')
                      payload = event.get('payload')
                      logger.debug(f"TG <~ Event: {event_type}")
                      msg = None
                      # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                      if event_type=='NOTIFICATION':
                          msg = f"üîî {payload.get('message')}"
                      elif event_type=='STATUS_RESPONSE':
                          msg = f"üìä <b>–°—Ç–∞—Ç—É—Å:</b>\n{self._format_status_message(payload)}"
                      elif event_type=='BALANCE_RESPONSE':
                          msg = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n{self._format_balance_message(payload)}"
                      elif event_type=='POSITION_RESPONSE':
                          msg = f"üìà <b>–ü–æ–∑–∏—Ü—ñ—è:</b>\n{self._format_position_message(payload)}"
                      elif event_type=='STATS_RESPONSE':
                          msg = f"üìâ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n{self._format_stats_message(payload)}"
                      elif event_type=='HISTORY_RESPONSE':
                          msg = f"üíæ {self._format_history_message(payload)}"
                      else:
                          logger.warning(f"TG: –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó: {event_type}")

                      # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                      if msg:
                          self.send_message(msg)
                      # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
                      self.event_queue.task_done()
            except queue.Empty:
                 # –Ø–∫—â–æ —á–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ü–∏–∫–ª
                 continue
            except Exception as e:
                 logger.error(f"TG –ü–æ–º–∏–ª–∫–∞ event_listener_loop: {e}", exc_info=True)
                 # –ü–∞—É–∑–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                 time.sleep(1)
        logger.info("TG Event listener loop –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    # --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è ---
    def _format_status_message(self, status: dict) -> str:
        if not status:
            return "N/A"
        running = "üü¢–ó–∞–ø—É—â–µ–Ω–æ" if status.get('is_running') else "üî¥–ó—É–ø–∏–Ω–µ–Ω–æ"
        ws = "‚úîÔ∏è–ü—ñ–¥–∫–ª." if status.get('websocket_connected') else "‚ùå–í—ñ–¥–∫–ª."
        pos = "–¢–∞–∫" if status.get('position_active') else "–ù—ñ"
        parts = [
            f"–°—Ç–∞–Ω: {running} | –†–µ–∂–∏–º: {status.get('active_mode','?')}",
            f"–°–∏–º–≤–æ–ª: {status.get('symbol','?')} | –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {status.get('strategy','?')}",
            f"WebSocket: {ws} | –ü–æ–∑–∏—Ü—ñ—è: {pos}"
        ]
        return "\n".join(parts)

    def _format_balance_message(self, balance: dict) -> str:
        if not balance:
            return "–ë–∞–ª–∞–Ω—Å–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ."
        msg = ""
        quote = getattr(self,'quote_asset','USDT')
        base = getattr(self,'base_asset','BASE')
        for asset in [quote, base]:
            if asset in balance:
                try:
                    free = Decimal(str(balance[asset].get('free',0)))
                    locked = Decimal(str(balance[asset].get('locked',0)))
                    msg += f"<b>{asset}:</b> Free={free:f} Locked={locked:f}\n"
                except Exception as e:
                    logger.warning(f"TG: –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É {asset}: {e}")
                    msg += f"<b>{asset}:</b> –ü–æ–º–∏–ª–∫–∞\n"
        other_assets = []
        for asset, data in balance.items():
             if asset not in [quote, base]:
                 try:
                     free = Decimal(str(data.get('free',0)))
                     locked = Decimal(str(data.get('locked',0)))
                     total = free + locked
                     if total > 1e-9:
                         other_assets.append(f"<b>{asset}:</b> Free={free:f} Locked={locked:f}")
                 except Exception as e:
                     logger.warning(f"TG: –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É {asset}: {e}")
        if other_assets:
            msg += "\n<i>–Ü–Ω—à—ñ (>0):</i>\n"
            msg += "\n".join(other_assets)
        msg = msg.replace('.00000000', '').replace(' 0 ', ' 0.0 ')
        if not msg:
            return "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –±–∞–ª–∞–Ω—Å—ñ–≤."
        else:
            return msg

    def _format_position_message(self, position: dict | None) -> str:
        if not position:
            return "–í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î."
        try:
            qty = Decimal(str(position.get('quantity',0)))
            entry_p = Decimal(str(position.get('entry_price',0)))
            entry_t = position.get('entry_time','N/A')
            entry_t_str = str(entry_t) # Default
            if isinstance(entry_t, datetime):
                 entry_t_str = entry_t.strftime('%Y-%m-%d %H:%M')
            elif isinstance(entry_t, str):
                 try:
                     entry_t_str = pd.to_datetime(entry_t,utc=True).strftime('%Y-%m-%d %H:%M')
                 except Exception:
                     # –ó–∞–ª–∏—à–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥–æ–∫, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏
                     entry_t_str = str(entry_t)

            price_prec = getattr(self,'price_precision',4)
            qty_prec = getattr(self,'qty_precision',8)
            return ( f"–°–∏–º–≤–æ–ª: {position.get('symbol','?')}\n"
                     f"–ö-—Å—Ç—å: {qty:.{qty_prec}f}\n"
                     f"–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {entry_p:.{price_prec}f}\n"
                     f"–ß–∞—Å –≤—Ö–æ–¥—É: {entry_t_str}" )
        except Exception as e:
            logger.error(f"TG: –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")
            return "–ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ—ó."

    def _format_stats_message(self, stats: dict) -> str:
        if not stats:
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—è."
        try:
            total_pnl = float(stats.get('total_pnl',0.0))
            avg_profit = float(stats.get('avg_profit',0.0))
            avg_loss = float(stats.get('avg_loss',0.0))
            pf = stats.get('profit_factor',0.0)
            pf_str = "‚àû" if pf==float('inf') else f"{pf:.2f}"
            return (f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {stats.get('session_duration','N/A')}\n"
                    f"–£–≥–æ–¥: {stats.get('total_trades',0)} (W:{stats.get('winning_trades',0)} L:{stats.get('losing_trades',0)})\n"
                    f"Win Rate: {stats.get('win_rate',0.0):.2f}%\n"
                    f"Total PnL: {total_pnl:.4f}\n"
                    f"Avg Win/Loss: {avg_profit:.4f}/{avg_loss:.4f}\n"
                    f"Profit Factor: {pf_str}" )
        except Exception as e:
             logger.error(f"TG: –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
             return "–ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."

    def _format_history_message(self, history_payload: dict) -> str:
        history = history_payload.get('trades',[])
        count = history_payload.get('count',len(history))
        if not history:
            return "–Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥ –ø–æ—Ä–æ–∂–Ω—è."
        msg = f"<b>–û—Å—Ç–∞–Ω–Ω—ñ {min(count, len(history))} —É–≥–æ–¥:</b>\n"
        price_prec = getattr(self,'price_precision',4)
        qty_prec = getattr(self,'qty_precision',8)
        # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ N —É–≥–æ–¥
        for trade in history[-count:]:
             try:
                 side = trade.get('side')
                 side_emoji = "üü¢" if side=='BUY' else ("üî¥" if side=='SELL' else "‚ö™Ô∏è")
                 price = Decimal(str(trade.get('price',0)))
                 qty = Decimal(str(trade.get('total_filled_qty',trade.get('quantity',0))))
                 pnl_val = trade.get('pnl')
                 pnl_str = ""
                 if pnl_val is not None:
                     try:
                         pnl_str = f" PnL:{Decimal(str(pnl_val)):.2f}"
                     except Exception:
                         pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è PnL
                 time_val = trade.get('time')
                 time_str = "N/A"
                 if isinstance(time_val,datetime):
                     time_str = time_val.strftime('%H:%M:%S')
                 elif isinstance(time_val,str):
                     try:
                         time_str = pd.to_datetime(time_val,utc=True).strftime('%H:%M:%S')
                     except Exception:
                         pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É –ø–∞—Ä—Å–∏–Ω–≥—É —á–∞—Å—É
                 purpose_val = trade.get('purpose')
                 purpose = ""
                 if purpose_val and purpose_val != 'UNKNOWN':
                     purpose = f"({purpose_val})"
                 msg += f"{side_emoji}{side} {qty:.{qty_prec}f}@{price:.{price_prec}f}{pnl_str}{purpose} ({time_str})\n"
             except Exception as e:
                 logger.error(f"TG: –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —É–≥–æ–¥–∏: {e}. –î–∞–Ω—ñ: {trade}")
                 msg += "<i>–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É</i>\n"
        return msg

    def stop(self):
        """–ó—É–ø–∏–Ω—è—î polling —Ç–∞ listener."""
        logger.info("TG –°–∏–≥–Ω–∞–ª –Ω–∞ –∑—É–ø–∏–Ω–∫—É...")
        self._stop_event.set()
        if self.bot:
            try:
                self.bot.stop_polling()
                logger.info("TG stop_polling() –≤–∏–∫–ª–∏–∫–∞–Ω–æ.")
            except Exception:
                # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ stop_polling, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å –≤–∏–Ω–∏–∫–∞—Ç–∏ –ø—Ä–∏ –≤–∂–µ –∑—É–ø–∏–Ω–µ–Ω–æ–º—É –±–æ—Ç—ñ
                pass
        # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—ñ–≤
        if self.polling_thread and self.polling_thread.is_alive():
            logger.debug("TG –ß–µ–∫–∞—î–º–æ polling thread...")
            self.polling_thread.join(timeout=1.5)
        if self.event_listener_thread and self.event_listener_thread.is_alive():
            logger.debug("TG –ß–µ–∫–∞—î–º–æ event listener thread...")
            self.event_listener_thread.join(timeout=1.5)
        logger.info("TG Handler –∑—É–ø–∏–Ω–µ–Ω–æ.")

# --- –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ---
if __name__ == '__main__':
    from dotenv import load_dotenv
    from modules.logger import setup_logger
    import queue
    import threading
    import logging

    load_dotenv()
    logger = setup_logger(level=logging.DEBUG, name="TelegramTestLogger")
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–∫–ª–∞–¥—É TelegramBotHandler...")
    cmd_q = queue.Queue()
    evt_q = queue.Queue()
    telegram_bot = TelegramBotHandler(command_queue=cmd_q, event_queue=evt_q)
    if telegram_bot.bot:
        def simulator(): # –Ü–º—ñ—Ç–∞—Ü—ñ—è BotCore
            time.sleep(5)
            evt_q.put({'type':'NOTIFICATION','payload':{'message':'Test Event 1'}})

            time.sleep(10)
            try:
                cmd = cmd_q.get(timeout=10)
                logger.info(f"Sim got: {cmd}")
                if cmd.get('type')=='GET_STATUS':
                    evt_q.put({'type':'STATUS_RESPONSE','payload':{'is_running':True,'active_mode':'TestNet','symbol':'SIMUSDT','strategy':'SimStrat','websocket_connected':True,'position_active':False}})
            except queue.Empty:
                pass

            time.sleep(5)
            try:
                cmd = cmd_q.get(timeout=10)
                logger.info(f"Sim got: {cmd}")
                if cmd.get('type')=='GET_BALANCE':
                    evt_q.put({'type':'BALANCE_RESPONSE','payload':{'USDT':{'free':'1000.50','locked':'1.0'},'SIM':{'free':'10000','locked':'0'}}})
            except queue.Empty:
                pass

            time.sleep(5)
            try:
                cmd = cmd_q.get(timeout=10)
                logger.info(f"Sim got: {cmd}")
                if cmd.get('type')=='GET_HISTORY':
                    count = cmd.get('payload',{}).get('count', 1)
                    evt_q.put({'type':'HISTORY_RESPONSE','payload':{'count':count, 'trades':[{'time':datetime.now(timezone.utc).isoformat(), 'symbol':'SIMUSDT', 'side':'BUY', 'price':'1', 'total_filled_qty':'10', 'purpose': 'ENTRY'}]*count }})
            except queue.Empty:
                pass
            logger.info("–°–∏–º—É–ª—è—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–≤ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ–π.")

        threading.Thread(target=simulator,daemon=True).start()
        try:
            logger.info("TG –±–æ—Ç —Å–ª—É—Ö–∞—î... Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.")
            while True:
                time.sleep(1) # –¢—Ä–∏–º–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ –∂–∏–≤–∏–º
        except KeyboardInterrupt:
            logger.info("Ctrl+C")
        finally:
            telegram_bot.stop()
    else:
        logger.warning("TG –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
    logger.info("–ü—Ä–∏–∫–ª–∞–¥ TG Handler –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
